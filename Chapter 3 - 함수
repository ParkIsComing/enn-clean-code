### Intro

의도를 분명히 표현하는 함수를 어떻게 구현할 수 있을까?

어떤 속성을 부여해야 처음 읽는 사람이 프로그램의 내부를 직관적으로 파악할 수 있을까?

### 1. 단순화하기

- **작게 만들어라 (중첩 구조를 피하라)**
    - 블록과 들여쓰기
    대개 함수를 호출하는 부분인 if문/else문/while문 등에 들어가는 블록은 한 줄이어야 한다.
        
        추가적으로, 각 함수들의 들여쓰기 수준이 2단을 넘어서지 않고, 함수 명이 명확하다면 코드를 이해하기 훨씬 쉬워진다.
        
        ```java
        public static String renderPageWithSetupsAndTeardowns( PageData pageData, boolean isSuite) throws Exception {
        	boolean isTestPage = pageData.hasAttribute("Test");
        	if (isTestPage) {
        		WikiPage testPage = pageData.getWikiPage();
        		StringBuffer newPageContent = new StringBuffer();
        		includeSetupPages(testPage, newPageContent, isSuite);
        		newPageContent.append(pageData.getContent());
        		includeTeardownPages(testPage, newPageContent, isSuite);
        		pageData.setContent(newPageContent.toString());
        	}
        	return pageData.getHtml();
        }
        ```
        
        ```java
        public static String renderPageWithSetupsAndTeardowns( PageData pageData, boolean isSuite) throws Exception { 
           if (isTestPage(pageData)) 
           	includeSetupAndTeardownPages(pageData, isSuite); 
           return pageData.getHtml();
        }
        ```
        
- **한 가지만 해라**
    - 한 가지 작업만 잘 수행해야 한다.
    추상화 수준이 하나인 단계만 수행한다면 한 가지 작업만 하는 것.
    - 함수 내 섹션
        
        한 함수를 여러 섹션으로 나눌 수 있다면, 그 함수는 여러 작업을 하는  것이다.
        
    - 위에서 아래로 코드 읽기: 내려가기 규칙
    코드는 위에서 아래로 이야기처럼 읽혀야 좋다.
        
        함수 추상화 부분이 한 번에 한 단계씩 낮아지는 것(내려가기 규칙)이 가장 이상적이다.
        
    
    ```
    TO 설정 페이지와 해제 페이지를 포함하려면, 설정 페이지를 포함하고, 테스트 내용을 포함하고, 해제 페이지를 포함한다.
    	TO 설정 페이지를 포함하려면, 슈트이면 슈트 설정 페이지를 포함한 후 ....
    	TO 슈트 설정 페이지를 포함하려면, 부모 계층에서 .....
    	TO 부모 계층을 검색하려면, .....
    ```
    

### 2. Switch문

switch문, if/else 구문의 연속은 작게 만들기 어렵다.

```java
public Money calculatePay(Employee e) throws InvalidEmployeeType {
	switch (e.type) {
		case COMMISSIONED:
			return calculateCommissionedPay(e);
		case HOURLY:
			return calculateHourlyPay(e);
		case SALARIED:
			return calculateSalariedPay(e);
		default:
			throw new InvalidEmployeeType(e.type);
	}
}
```

위의 함수는

1. 함수가 길다
2. 한가지 작업만 수행하지 않는다.
3. 코드를 변경할 이유가 많기 때문에 SRP를 위반한다.
4. 새 직원 유형을 추가할 때 마다 코드 변경의 가능성이 있으므로 OCP를 위반한다.

라는 문제점들이 존재한다.

다형성을 이용하여 위의 문제점들을 해결한 함수가 아래이다.

switch문을 abstract factory에 숨겨 다형적 객체를 생성하는 코드 안에서만 switch를 사용하도록 한다.

```java
public abstract class Employee {
	public abstract boolean isPayday();
	public abstract Money calculatePay();
	public abstract void deliverPay(Money pay);
}
-----------------
public interface EmployeeFactory {
	public Employee makeEmployee(EmployeeRecord r) throws InvalidEmployeeType; 
}
-----------------
public class EmployeeFactoryImpl implements EmployeeFactory {
	public Employee makeEmployee(EmployeeRecord r) throws InvalidEmployeeType {
		switch (r.type) {
			case COMMISSIONED:
				return new CommissionedEmployee(r) ;
			case HOURLY:
				return new HourlyEmployee(r);
			case SALARIED:
				return new SalariedEmploye(r);
			default:
				throw new InvalidEmployeeType(r.type);
		} 
	}
}
```

### 3. 서술적인 함수 이름 사용하기

- 길고 서술적인 이름이 짧고 어려운 이름보다 좋다.
    
    ex) testaleHtml → SetupTeardownIncluder
    

                     

- 일관성 있는 서술적인 이름을 사용한다.
    
    ex) includeSetupAndTeardownPages, includeSetupPages,  includeSuiteSetupPage
    

### 4. 함수 인수

함수에서 이상적인 인수 개수는 0개(무항)이다.

인수는 코드 이해를 어렵게 하는 요소이므로 입력 인수의 최선은 0개이고, 차선은 1개뿐인 경우이다.

출력 인수(함수의 반환값이 아닌 입력 인수로 결과를 받는 경우)는 입력 인수보다 이해하기 어려우므로 웬만하면 쓰지 않는 것이 좋다.

- **단항 형식**
    1. 인수에 질문을 던지는 경우
        
        `boolean fileExists(“MyFile”);`
        
    2. 인수를 뭔가로 변환해 결과를 변환하는 경우
        
        `InputStream fileOpen(“MyFile”);`
        
    3. 코드에 명확하게 이벤트 함수임이 드러나는 경우
    
    위의 3가지가 아니라면 단항 함수는 가급적 피         다.
    
- **플래그 인수**
    
    플래그 인수는 사용하지 마라. bool 값을 넘기는 것 자체가 그 함수는 한꺼번에 여러가지 일을 처리한다고 공표하는 것과 마찬가지다.
    
- **이항 함수**
    
    단항 함수보다 이해하기가 어렵다.
    
    2개의 인수의 자연적인 순서가 있어야 하는 Point 클래스처럼 이항 함수가 적절한 경우도 있다.
    
    `Point p = new Point(x,y);` 
    
    이처럼 무조건 나쁜 것은 아니지만, 인수가 1개일 때보다 이해가 어렵고 위험이 따르므로 가능하면 단항으로 바꾸도록 한다.
    
- **삼항 함수**
    
    이항 함수보다 이해하기 훨씬 어렵고 위험도 2배 이상 늘어나므로 신중히 고려하라.
    
- **인수 객체**
    
    인수가 2개 이상 필요할 경우, 일부 인수를 독자적인 클래스 변수로 선언할 가능성을 살펴보자.
    
    `Circle makeCircle(double x, double y, double radius);`
    
    `Circle makeCircle(Point center, double radius);`
    
    x,y를 인자로 넘기는 것보다 Point를 넘기는 것이 더 낫다.
